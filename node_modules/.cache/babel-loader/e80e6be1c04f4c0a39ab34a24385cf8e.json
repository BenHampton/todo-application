{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  todoList: []\n};\nconst todoSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    saveTodo: (state, action) => {\n      state.todoList.push(action.payload);\n    },\n    // setCheck: (state, action) => {\n    //     state.todoList.map( todo  =>  {\n    //         if (action.payload === todo.date) {\n    //             todo.done = !todo.done\n    //         }\n    //     })\n    // },\n    removeItem: (state, action) => {\n      state.todoList.splice(action.payload, 1);\n    }\n  }\n});\nexport const {\n  saveTodo,\n  setCheck,\n  removeItem\n} = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/Users/benhampton/Documents/git/transactly-weekend-challenges/todo-app/src/features/todoSlice.js"],"names":["createSlice","initialState","todoList","todoSlice","name","reducers","saveTodo","state","action","push","payload","removeItem","splice","setCheck","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE;AADO,CAArB;AAIA,MAAMC,SAAS,GAAGH,WAAW,CAAC;AAC1BI,EAAAA,IAAI,EAAE,OADoB;AAE1BH,EAAAA,YAF0B;AAG1BI,EAAAA,QAAQ,EAAE;AACNC,IAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzBD,MAAAA,KAAK,CAACL,QAAN,CAAeO,IAAf,CAAoBD,MAAM,CAACE,OAA3B;AACH,KAHK;AAKN;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,IAAAA,UAAU,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC3BD,MAAAA,KAAK,CAACL,QAAN,CAAeU,MAAf,CAAsBJ,MAAM,CAACE,OAA7B,EAAsC,CAAtC;AACH;AAfK;AAHgB,CAAD,CAA7B;AAsBA,OAAO,MAAM;AAAEJ,EAAAA,QAAF;AAAYO,EAAAA,QAAZ;AAAsBF,EAAAA;AAAtB,IAAqCR,SAAS,CAACW,OAArD;AACP,eAAeX,SAAS,CAACY,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    todoList: []\n}\n\nconst todoSlice = createSlice({\n    name: 'todos',\n    initialState,\n    reducers: {\n        saveTodo: (state, action) => {\n            state.todoList.push(action.payload)\n        },\n\n        // setCheck: (state, action) => {\n        //     state.todoList.map( todo  =>  {\n        //         if (action.payload === todo.date) {\n        //             todo.done = !todo.done\n        //         }\n        //     })\n        // },\n\n        removeItem: (state, action) => {\n            state.todoList.splice(action.payload, 1)\n        }\n    }\n})\n\nexport const { saveTodo, setCheck, removeItem } = todoSlice.actions\nexport default todoSlice.reducer"]},"metadata":{},"sourceType":"module"}